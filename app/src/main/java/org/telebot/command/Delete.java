package org.telebot.command;

import lombok.Setter;
import org.telebot.command.interfaces.ExecuteButton;
import org.telebot.command.interfaces.ExecuteCommand;
import org.telebot.command.runner.Command;
import org.telebot.connector.ConnectBot;
import org.telebot.data.Friend;
import org.telebot.data.IdEnum;
import org.telebot.data.StepAdd;
import org.telebot.data.User;
import org.telebot.data.database.DBConnector;
import org.telebot.data.database.DBManager;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

@Setter
public class Delete extends ConnectBot implements ExecuteCommand {

    public Command getCommand() {
        return new Command("/delete", "–£–¥–∞–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!");
    }
    private static Map<Long, IdEnum> step = new HashMap<>();

    @Override
    public void apply(Update update) {
        Long chatId = update.getMessage().getChatId();


        String text = update.getMessage().getText();

        if (text.equals("/delete")) {
            startDeletingFriend(chatId);
            return;
        }

        if (step == null) {
            return;
        }

        IdEnum currentStep = step.get(chatId);

        switch (currentStep) {
            case WAITING_ID -> handleId(chatId, text, update);
        }

    }

    private void startDeletingFriend(Long chatId) {
        step.put(chatId, IdEnum.WAITING_ID);
        sendMessage(chatId, "üóëÔ∏è <strong>–£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞</strong>");
        sendMessage(chatId, "üÜî –í–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:");
        sendMessage(chatId, "üí° <em>ID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π</em>");

    }

    private void handleId(Long chatId, String friendId, Update update) {
        Registration registration = new Registration();
        try {
            DBManager dbManager = new DBManager(new DBConnector());
            if (!dbManager.checkUserExisting(chatId)) {
                sendMessage(chatId, "‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –¥—Ä—É–∑–µ–π, –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!");
                registration.apply(update);
                return;
            }
            Long id;
            try {
                id = Long.parseLong(friendId);
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!");
                return;
            }
            if (dbManager.isFriendOwnedByUser(id, chatId)) {
                dbManager.deleteFriendById(id);
                sendMessage(chatId, "‚úÖ –î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
                step.remove(chatId);
            } else {
                sendMessage(chatId, "‚ùå –î—Ä—É–≥–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!");
            }

        } catch (SQLException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
        }


    }

    private void sendMessage(Long chatId, String text) {
        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), text);
        sendMessage.setParseMode(ParseMode.HTML);
        try {
            execute(sendMessage);
        } catch (Exception e) {
            System.out.println(e.getMessage());

        }

    }

    public static Boolean isUserInDeleteProcess(Long chatId) {
        return step.containsKey(chatId);
    }
}
