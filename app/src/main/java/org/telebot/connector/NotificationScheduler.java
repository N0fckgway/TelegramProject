package org.telebot.connector;

import org.telebot.data.Friend;
import org.telebot.data.User;
import org.telebot.data.database.DBConnector;
import org.telebot.data.database.DBManager;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.sql.SQLException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class NotificationScheduler extends ConnectBot {

    private final DBManager dbManager;
    private static ScheduledExecutorService scheduler;

    public NotificationScheduler() {
        DBConnector dbConnector = new DBConnector();
        this.dbManager = new DBManager(dbConnector);
        startScheduler();
    }

    private void startScheduler() {
        scheduler = Executors.newScheduledThreadPool(1);
        scheduleDailyNotification();

    }

    private synchronized void scheduleDailyNotification() {
        long initialDelay = getNextRunTime(10, 0);

        scheduler.schedule(
                () -> {
                    sendDailyNotifications();
                    sendBirthdayNotificationForFriends();
                    scheduleDailyNotification();
                },
                initialDelay,
                TimeUnit.MILLISECONDS
        );
    }

    public void changeButtonStatusUser(Boolean enable, Long chatId) {
        dbManager.updateEnableUser(enable, chatId);
    }

    public void changeButtonStatusFriend(Boolean enable, Long chatId) {
        dbManager.updateEnableFriend(enable, chatId);
    }

    private long getNextRunTime(int hour, int minute) {
        ZonedDateTime now = ZonedDateTime.now();
        ZonedDateTime nextRun = now.withHour(hour).withMinute(minute).withSecond(0).withNano(0);

        if (now.compareTo(nextRun) > 0) {
            nextRun = nextRun.plusDays(1);
        }

        return Duration.between(now, nextRun).toMillis();
    }

    private void sendDailyNotifications() {
        try {
            List<User> users = dbManager.getAllUsersWithEnabled(true);
            for (User user : users) {
                if (user.getBirthday() != null) {
                    sendBirthdayNotification(user);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendBirthdayNotification(User user) {
        try {
            long daysUntil = daysUntilBirthday(user.getBirthday());

            String message = createBirthdayMessage(user, daysUntil);

            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(String.valueOf(user.getChatId()));
            sendMessage.setText(message);
            sendMessage.setParseMode(ParseMode.HTML);

            execute(sendMessage);
            System.out.println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + user.getChatId());

        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void sendBirthdayNotificationForFriends() {
        try {
            List<User> users = dbManager.getAllUsersWithEnabled(true);
            for (User user : users) {
                List<Friend> friends = dbManager.getAllFriendsWithEnabled(true);
                for (Friend friend : friends) {
                    if (friend.getBirthday() != null) {
                        sendFriendBirthdayNotification(user, friend);
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥—Ä—É–∑—å—è—Ö: " + e.getMessage());

        }
    }

    private void sendFriendBirthdayNotification(User user, Friend friend) {
        try {
            long daysUntil = daysUntilBirthday(friend.getBirthday());


            if (daysUntil == 7 || daysUntil == 1) {
                String message = createFriendBirthdayMessage(user, friend, daysUntil);

                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(String.valueOf(user.getChatId()));
                sendMessage.setText(message);
                sendMessage.setParseMode(ParseMode.HTML);

                execute(sendMessage);
                System.out.println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—Ä—É–≥–µ " + friend.getFirstName() +
                        " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + user.getChatId() + " (–æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: " + daysUntil + ")");
            }
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—Ä—É–≥–µ: " + e.getMessage());
        }
    }

    private String createFriendBirthdayMessage(User user, Friend friend, long daysUntil) {
        String friendName = friend.getFirstName();
        if (friend.getLastName() != null) {
            friendName += " " + friend.getLastName();
        }
        String userName = user.getFirstName() != null ? user.getFirstName() : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

        if (daysUntil == 7) {
            return "üßë‚Äçüßí <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–∞</b>\n\n" +
                    "–ü—Ä–∏–≤–µ—Ç, " + userName + "!\n\n" +
                    "–£ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ <b>" + friendName + "</b> (" + friend.getRole() + ") " +
                    "—á–µ—Ä–µ–∑ <b>7 –¥–Ω–µ–π</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ\n\n" +
                    "üéÇ –î–∞—Ç–∞: " + friend.getBirthday().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")) + "\n" +
                    "üè∑Ô∏è –†–æ–ª—å: " + friend.getRole() + "\n\n" +
                    "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ! üéÅ";
        } else if (daysUntil == 1) {
            return "üö® <b>–°–†–û–ß–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï!</b>\n\n" +
                    "–ü—Ä–∏–≤–µ—Ç, " + user.getFirstName() + "!\n\n" +
                    "–£ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ <b>" + friendName + "</b> (" + friend.getRole() + ") " +
                    "<b>–ó–ê–í–¢–†–ê</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ\n\n" +
                    "üéÇ –î–∞—Ç–∞: " + friend.getBirthday().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")) + "\n" +
                    "üè∑Ô∏è –†–æ–ª—å: " + friend.getRole() + "\n\n" +
                    "–ü–æ—Ä–∞ –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å! üéÅ‚ú®";
        }

        return "";
    }


    private long daysUntilBirthday(LocalDate birthday) {
        LocalDate today = LocalDate.now();
        LocalDate nextBirthday = birthday.withYear(today.getYear());

        if (nextBirthday.isBefore(today)) {
            nextBirthday = nextBirthday.plusYears(1);
        }

        return ChronoUnit.DAYS.between(today, nextBirthday);
    }

    private String createBirthdayMessage(User user, long daysUntil) {
        String name = user.getFirstName();
        if (user.getLastName() != null) {
            name += " " + user.getLastName();
        }
        String motivation = getMotivationalPhrase(daysUntil);

        if (daysUntil == 0) {
            return "üéâ<b>–° –î–ù–Å–ú –†–û–ñ–î–ï–ù–ò–Ø, " + name + "!</b>\n\n" +
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n" +
                    "–ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ! üéÅ‚ú®\n\n" +
                    motivation;
        } else if (daysUntil == 1) {
            return "ü•≥ <b>–ó–∞–≤—Ç—Ä–∞ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!</b>\n\n" +
                    "–ü—Ä–∏–≤–µ—Ç, " + name + "!\n" +
                    "–ó–∞–≤—Ç—Ä–∞ –≤–∞—à –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É! üéâ\n\n" +
                    motivation;
        } else {
            return "üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n" +
                    "–ü—Ä–∏–≤–µ—Ç, " + name + "!\n" +
                    "–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å <b>" + daysUntil + " –¥–Ω–µ–π</b>! üéâ\n\n" +
                    motivation;
        }
    }

    private String getMotivationalPhrase(long daysUntil) {
        if (daysUntil == 0) {
            return "üêé –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞ –∫–æ–Ω–µ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º!";
        } else if (daysUntil <= 7) {
            return "üî• –ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏ –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞! –ù–∞—á–∏–Ω–∞–π –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–∞–º–æ–º—É –ª—É—á—à–µ–º—É –¥–Ω—é –≤ –≥–æ–¥—É!";
        } else if (daysUntil <= 30) {
            return "üåü –ú–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞ –¥–æ —Ç–≤–æ–µ–≥–æ –¥–Ω—è! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ —à–∞–≥ –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º!";
        } else if (daysUntil <= 100) {
            return "üí™ –ú–µ–Ω—å—à–µ —Å—Ç–∞ –¥–Ω–µ–π –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞! –¢—ã –º–æ–∂–µ—à—å –º–Ω–æ–≥–æ–µ —É—Å–ø–µ—Ç—å –¥–æ —Å–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è!";
        } else if (daysUntil <= 200) {
            return "üöÄ –ú–µ–Ω—å—à–µ –¥–≤—É—Ö—Å–æ—Ç –¥–Ω–µ–π! –£ —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–º—è –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤ –∂–∏–∑–Ω—å –≤—Å–µ –º–µ—á—Ç—ã!";
        } else {
            return "üåç –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å —É–∂–µ –º–µ–Ω—å—à–µ –≥–æ–¥–∞! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!";
        }
    }


}
